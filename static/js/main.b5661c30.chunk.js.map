{"version":3,"sources":["Map.js","styles/mapStyles.js","App.js","serviceWorker.js","index.js"],"names":["mapContainerStyle","width","height","center","lat","lng","options","styles","disableDefaultUI","zoomControl","Map","props","directionsCallback","response","console","log","status","setState","state","travelMode","origin","destination","waypoints","location","stopover","googleMapsApiKey","process","zoom","this","callback","directions","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b5661c30.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport mapStyles from \"./styles/mapStyles\";\nimport {\n    GoogleMap,\n    LoadScript,\n    DirectionsService,\n    DirectionsRenderer,\n} from \"@react-google-maps/api\";\n\nconst mapContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n}\nconst center = {\n    lat: 43.653225,\n    lng: -79.383186,\n}\nconst options = {\n    styles: mapStyles,\n    disableDefaultUI: true,\n    zoomControl: true,\n}\n// const {isLoaded, loadError} = useLoadScript({\n//     googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n//     libraries,\n// });\n// // const [markers, setMarkers] = React.useState([]);\n// // const [selected, setSelected] = React.useState(null);\n// if (loadError) console.log(\"Error loading maps\");\n// if (!isLoaded) console.log(\"return Loading Maps\");\n\nclass Map extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            response: null,\n            travelMode: 'DRIVING',\n            origin: 'ann arbor',\n            destination: 'toronto',\n            waypoints: [{location: 'detroit', stopover: true}]\n        };\n    }\n\n    directionsCallback = response => {\n        console.log(response)\n\n        if (response !== null) {\n            if (response.status === 'OK') {\n                this.setState(\n                    () => ({\n                        response\n                    })\n                )\n            } else {\n                console.log('response: ', response)\n            }\n        }\n    }\n\n\n// const mapRef = React.useRef();\n// const onMapLoad = React.useCallback((map) => {\n//     mapRef.current = map;\n// }, []);\n    render() {\n        return (\n            <div>\n                <h1>Travel Planner</h1>\n                <LoadScript\n                    googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}\n                >\n                    <GoogleMap\n                        mapContainerStyle={mapContainerStyle}\n                        zoom={12}\n                        center={center}\n                        options={options}>\n                        {/*onClick={(event) => {*/}\n                        {/*//     setMarkers(prev => [...prev, {*/}\n                        {/*//         lat: event.latLng.lat(),*/}\n                        {/*//         lng: event.latLng.lng(),*/}\n                        {/*//         time: new Date(),*/}\n                        {/*//     }])*/}\n                        {/*// }}>*/}\n                        {/*{markers.map(marker => <Marker*/}\n                        {/*    key={marker.time.toISOString()}*/}\n                        {/*    position={{lat: marker.lat, lng: marker.lng}}*/}\n                        {/*    onClick={() => {*/}\n                        {/*        setSelected(marker);*/}\n                        {/*    }}*/}\n                        {/*/>)}*/}\n                        {/*{selected ? (<InfoWindow*/}\n                        {/*    position={{lat: selected.lat, lng: selected.lng}}*/}\n                        {/*    // set the selected back to null when closing the info window*/}\n                        {/*    onCloseClick={() => {*/}\n                        {/*        setSelected(null);*/}\n                        {/*    }}>*/}\n                        {/*    <div>*/}\n                        {/*        <h2>Spot</h2>*/}\n                        {/*        <p>Some info about that spot...</p>*/}\n                        {/*    </div>*/}\n                        {/*</InfoWindow>) : null}*/}\n                        <DirectionsService\n                            options={{\n                                destination: this.state.destination,\n                                origin: this.state.origin,\n                                waypoints: this.state.waypoints,\n                                travelMode: this.state.travelMode,\n                            }}\n                            callback={this.directionsCallback}\n                        />\n                        <DirectionsRenderer\n                            options={{directions: this.state.response}}\n                        />\n                    </GoogleMap>\n                </LoadScript>\n            </div>\n        )\n    };\n}\n\nexport default Map;","export default [\n    {\n        \"featureType\": \"administrative\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#6195a0\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"administrative.province\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"lightness\": \"0\"\n            },\n            {\n                \"saturation\": \"0\"\n            },\n            {\n                \"color\": \"#f5f5f2\"\n            },\n            {\n                \"gamma\": \"1\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape.man_made\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"lightness\": \"-3\"\n            },\n            {\n                \"gamma\": \"1.00\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape.natural.terrain\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi.park\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#bae5ce\"\n            },\n            {\n                \"visibility\": \"on\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"saturation\": -100\n            },\n            {\n                \"lightness\": 45\n            },\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#fac9a9\"\n            },\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"labels.text\",\n        \"stylers\": [\n            {\n                \"color\": \"#4e4e4e\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.arterial\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#787878\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.arterial\",\n        \"elementType\": \"labels.icon\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit.station.airport\",\n        \"elementType\": \"labels.icon\",\n        \"stylers\": [\n            {\n                \"hue\": \"#0a00ff\"\n            },\n            {\n                \"saturation\": \"-77\"\n            },\n            {\n                \"gamma\": \"0.57\"\n            },\n            {\n                \"lightness\": \"0\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit.station.rail\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#43321e\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit.station.rail\",\n        \"elementType\": \"labels.icon\",\n        \"stylers\": [\n            {\n                \"hue\": \"#ff6c00\"\n            },\n            {\n                \"lightness\": \"4\"\n            },\n            {\n                \"gamma\": \"0.75\"\n            },\n            {\n                \"saturation\": \"-68\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"color\": \"#eaf6f8\"\n            },\n            {\n                \"visibility\": \"on\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#c7eced\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"lightness\": \"-49\"\n            },\n            {\n                \"saturation\": \"-53\"\n            },\n            {\n                \"gamma\": \"0.79\"\n            }\n        ]\n    }\n]","import React from 'react';\nimport './App.css';\nimport Map from './Map';\nimport mapStyles from \"./styles/mapStyles\";\n// import {\n//     GoogleMap,\n//     useLoadScript,\n//     Marker,\n//     InfoWindow,\n//     DirectionsRenderer\n// } from \"@react-google-maps/api\"\n// import {formatRelative} from \"date-fns\";\n// import \"@reach/combobox/styles.css\";\n\nexport default function App() {\n\n    // const {isLoaded, loadError} = useLoadScript({\n    //     googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    //     libraries,\n    // });\n    // const [markers, setMarkers] = React.useState([]);\n    // const [selected, setSelected] = React.useState(null);\n    // const mapRef = React.useRef();\n    // const onMapLoad = React.useCallback((map) => {\n    //     mapRef.current = map;\n    // }, []);\n\n    return (\n        <div>\n            <Map/>\n        </div>\n    )\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}